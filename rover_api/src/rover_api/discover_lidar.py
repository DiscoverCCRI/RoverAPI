from sensor_msgs.msg import LaserScan, PointCloud2
from rospy import loginfo, sleep, Subscriber, init_node, Time, Publisher
import laser_geometry.laser_geometry as lg
from rosbag import Bag
import roslaunch
from subprocess import run
from rover_api.discover_utils import Config, get_time_str
from os import mkdir
from os.path import exists
from itertools import islice



class Lidar(Config):
    """
    A class for using the RPLidar A2.
    """

    def __init__(self, callback=None, convert=False, subscribe=True):
        """
        @brief The constructor for the Lidar class. This function sets up all 
        attributes of the class, and subscribes to the proper topics to enable
        data collection from the lidar.
        @param self: A reference to the current object.
        @param callback: A function to be called whenever new data is published
        by the lidar. The default value is none.
        @param convert: A boolean value specifying whether to convert the two-
        dimensional laser scan data published by the lidar into pointcloud form.
        The default value is False.
        @param subscribe: A boolean value specifying whether to subscribe to, and
        collect data from, the topic published by the lidar. The default value is
        True.
        @return: None.
        """
        try:
            loginfo("Lidar initialized!")
        finally:
            super().__init__()
            self._scan_buffer = []
            self._bag_open = False
            self._rosbag = None
            self._convert = convert
            self._lp = None
            self._pc_pub = None
            self.callback_func = callback
            
            if self._convert:
                self._lp = lg.LaserProjection()
                self._pc_pub = Publisher("/pointcloud", PointCloud2, 
                                                                 queue_size=10)
            if subscribe:
                self.subscribe_to_scan()
            
            if not exists("/experiment"):
                mkdir("/experiment")
            
            # give scan a chance to start publishing
            sleep(0.25)

    def subscribe_to_scan(self):
        """
        @brief A function allowing the user to subscribe to the scan
        topic at a time other than object instantiation.
        @param self: A reference to the current object.
        @return: None
        """
        Subscriber("/scan", LaserScan, self.__callback_get_scan)

    def __callback_get_scan(self, message: LaserScan):
        """
        @brief A helper method to facilitate the passing of laserscan data
        from the /scan ROS topic to user-facing methods. It appropriately writes
        data to rosbags and/or converts to pointclouds if needed.
        @param self: A reference to the current object.
        @param message: A ROS LaserScan object generated by the lidar on the 
        /scan topic.
        @return: None
        """
        pc2_msg = None 

        if self.callback_func is not None:
            self.callback_func()
        
        if self._convert:
            pc2_msg = self._lp.projectLaser(message)
            self._pc_pub.publish(pc2_msg)
            self._scan_buffer.append(pc2_msg)
        else:
            self._scan_buffer.append(message)

        if(self._bag_open):
            if self._convert:
                self._rosbag.write("/pointcloud", pc2_msg)
            else:
                self._rosbag.write("/scan", message)

        if len(self._scan_buffer) > 30:
            self._scan_buffer.pop(0)
        
    def get_latest_scan(self):
        """
        @brief A method which returns the latest LaserScan message object.
        @param self: A reference to the current object.
        @return: The latest LaserScan message object in the scan buffer.
        """
        return self._scan_buffer[-1] 
    
    def start_recording(self):
        """
        @brief A method which starts recording data from the lidar to a rosbag.
        The bag is named /experiment/<time_at_start>_scan.bag.
        @param self: A reference to the current object.
        @return: None
        """
        self._bag_open = True
        self._rosbag = Bag(get_time_str(Time.now(), "_scan.bag"), 'w')

    def stop_recording(self):
        """
        @brief A method which stops recording data from the lidar to a rosbag.
        If convert was set to true in the constructor, the rosbag is converted
        to a pointcloud.
        @param self: A reference to the current object.
        @return: None
        """
        self._bag_open = False
        self._rosbag.close()
        if self._convert:
            run("rosrun pcl_ros bag_to_pcd /experiment/*.bag /pointcloud /experiment/pointclouds", shell=True)



    # TODO: figure out the different modes of the lidar, how to stop and start
    # external launch files, and if it is worth it to let the user change mode
    def isAvailable(self):
        """
        @brief A method which lets the user know if the lidar is available on the rover.
        @param self: A reference to the current object.
        @return: A boolean value specifying if the lidar is available for the user.
        """
        return super().isAvailable()

    def getInfo(self):
        """
        @brief A method which gives the user info about the configuration of the lidar.
        Items like scan rate, and scan distance are included.
        @param self: A reference to the current object.
        @return: A string containing information about the lidar.
        """
        info_dict = super().getInfo()
        return dict(islice(info_dict.items(), 0, 8, 1))
